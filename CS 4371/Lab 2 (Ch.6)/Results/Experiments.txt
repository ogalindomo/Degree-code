Experiment 1:
model.add(Embedding(len(word_index), 50, input_length = 25))
model.add(SimpleRNN(32, return_sequences = True))
model.add(Flatten())
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['acc'])

Experiment 2:
model.add(Embedding(len(word_index), 50, input_length = 25))
model.add(Flatten())
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['acc'])

Experiment 3:
model.add(Embedding(len(word_index), 50, input_length = 25))
model.add(Flatten())
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['acc'])

Experiment 4:
model.add(Embedding(int(len(word_index)), 12, input_length = 10))
model.add(GRU(64, return_sequences = True, recurrent_dropout = 0.2))
model.add(Flatten())
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['acc'])

Experiment 5:
model = Sequential()
model.add(Embedding(int(len(word_index)), 12, input_length = 10))
model.add(LSTM(64, return_sequences = True, recurrent_dropout = 0.7, activation='tanh'))
model.add(Flatten())
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='Adam', loss='binary_crossentropy', metrics=['acc'])
model.summary()