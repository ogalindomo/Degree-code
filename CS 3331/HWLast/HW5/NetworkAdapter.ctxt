#BlueJ class context
comment0.target=NetworkAdapter
comment0.text=\ \n\ An\ abstraction\ of\ a\ TCP/IP\ socket\ for\ sending\ and\ receiving\ \n\ Connect\ Five\ game\ messages.\ This\ class\ allows\ two\ players\ to\ communicate\ \n\ with\ each\ other\ through\ a\ socket\ and\ play\ Connect\ Five.\n\ It\ is\ assumed\ that\ a\ socket\ connection\ is\ already\ established\ between\ \n\ the\ players.\n\ \n\ <p>\n\ This\ class\ supports\ a\ few\ different\ types\ of\ messages.\ \n\ Each\ message\ is\ one\ line\ of\ text,\ a\ sequence\ of\ characters\n\ ended\ by\ the\ end-of-line\ character,\ and\ consists\ of\ a\ header\ and\ a\ body.\n\ A\ message\ header\ identifies\ a\ message\ type\ and\ ends\ with\ a\ "\:",\ e.g.,\n\ "fill\:".\ A\ message\ body\ contains\ the\ content\ of\ a\ message.\ If\ it\ \n\ contains\ more\ than\ one\ element,\ they\ are\ separated\ by\ a\ ",",\n\ e.g.,\ "1,2,3".\ There\ are\ seven\ different\ messages\ as\ defined\ below.\n\ </p>\n\ \n\ <ul>\n\ \ \ \ \ <li>join\:\ --\ request\ to\ join</li>\n\ \ \ \ \ <li>join_ack\:\ n\ [,s,b]\ --\ acknowledge\ a\ join\ request,\ where\ n\ (response)\n\ \ \ \ \ \ \ \ \ is\ either\ 0\ (declined)\ or\ 1\ (accepted),\ s\ is\ a\ board\ size,\ and\ b\n\ \ \ \ \ \ \ \ \ is\ a\ sequence\ of\ non-empty\ squares\ of\ a\ board,\ each\ encoded\ as\:\n\ \ \ \ \ \ \ \ \ x,y,v,f\ (x,\ y\:\ 0-based\ column/row\ indexes,\ v\:\ contained\ value,\ \n\ \ \ \ \ \ \ \ \ f\:\ 1\ if\ the\ value\ is\ given/fixed\ or\ 0\ if\ filled\ by\ the\ user.\n\ \ \ \ \ \ \ \ \ The\ size\ (s)\ and\ board\ (b)\ are\ required\ only\ when\ n\ is\ 1.</li>\n\ \ \ \ \ <li>new\:\ s,b\ --\ request\ to\ start\ a\ new\ game,\ where\ s\ is\ a\ board\ size,\n\ \ \ \ \ \ \ \ \ and\ b\ is\ a\ board\ encoded\ in\ the\ same\ way\ as\ the\ join_ack\ message.</li>\n\ \ \ \ \ <li>new_ack\:\ n\ --\ ack\ new\ game\ request,\ where\ n\ (response)\ is\n\ \ \ \ \ \ \ \ \ either\ 0\ (declined)\ or\ 1\ (accepted).</li>\n\ \ \ \ \ <li>fill\:\ x,\ y,\ v\ --\ fill\ a\ square,\ where\ x\ and\ y\ are\ 0-based\ \n\ \ \ \ \ \ \ \ \ column/row\ indexes\ of\ a\ square\ and\ v\ is\ a\ number.</li>\n\ \ \ \ \ <li>fill_ack\:\ x,\ y,\ v\ --\ acknowledge\ a\ fill\ message.</li>\n\ \ \ \ \ <li>quit\:\ --\ leaves\ a\ game\ by\ ending\ the\ connection.</li>\n\ </ul>\n\n<p>\n\ Two\ players\ communicate\ with\ each\ other\ as\ follows.\ \n\ One\ of\ the\ players\ (client)\ connects\ to\ the\ other\ (server)\ \n\ and\ requests\ to\ join\ the\ current\ game\ of\ the\ server;\ the\ player\ who\ \n\ initiates\ the\ connection\ must\ send\ a\ join\ message,\ \n\ as\ the\ other\ player\ will\ be\ waiting\ for\ it.\n\ If\ the\ server\ accepts\ the\ request,\ it\ sends\ its\ puzzle\ (board)\ to\ the\ client.\ \n\ Now,\ both\ players\ can\ solve\ the\ shared\ puzzle\ by\ sending\ and\ receiving\ a\ series\ \n\ of\ fill\ and\ fill_ack\ messages.\ A\ player\ may\ quit\ a\ shared\ game\ or\ make\ a\ request\n\ to\ play\ a\ new\ shared\ game\ by\ sending\ a\ new\ puzzle.\n\ </p>\n\n\ 1.\ Joining\ (accepted).\n\ <pre>\n\ \ Client\ \ \ \ \ \ \ \ Server\n\ \ \ \ |------------&gt;|\ join\:\ --\ request\ to\ join\n\ \ \ \ |&lt;------------|\ join_ack\:1,9,0,0,2,1,...\ --\ accept\ the\ request\n\n\ \ \ \ ...\n\ </pre>\n\ \n\ 2.\ Joining\ (declined)\n\ <pre>\n\ \ Client\ \ \ \ \ \ \ \ Server\n\ \ \ \ |------------&gt;|\ join\:\ --\ request\ to\ join\n\ \ \ \ |&lt;------------|\ join_ack\:0\ --\ decline\ the\ request\ (disconnected\!)\n\ </pre>\ \n\n\ 3.\ Starting\ a\ new\ game\ (accepted)\n\ <pre>\n\ \ Client\ \ \ \ \ \ \ \ Server\n\ \ \ \ |------------&gt;|\ join\:\ --\ request\ to\ join\n\ \ \ \ |&lt;------------|\ join_ack\:1,9,0,0,2,1,...\ --\ accept\ the\ request\n\ \ \ \ ...\n\ \ \ \ |------------&gt;|\ new\:\ 9,1,1,2,1,...\ --\ request\ for\ a\ new\ game\n\ \ \ \ |&lt;------------|\ new_ack\:1\ --\ accept\ the\ request\n\ \ \ \ |&lt;------------|\ fill\:3,3,5\ --\ server\ fill\n\ \ \ \ |------------&gt;|\ fill_ack\:3,3,5\ --\ client\ ack\n\ \ \ \ ...\n\ </pre>\n\ \n\ 4.\ Starting\ a\ new\ game\ (declined)\n\ <pre>\n\ \ Client\ \ \ \ \ \ \ \ Server\n\ \ \ \ |------------&gt;|\ join\:\ --\ request\ to\ join\n\ \ \ \ |&lt;------------|\ join_ack\:1,9,0,0,2,1,...\ --\ accept\ the\ request\n\ \ \ \ ...\n\ \ \ \ |------------&gt;|\ new\:\ 9,1,1,2,1,...\ --\ request\ for\ a\ new\ game\n\ \ \ \ |&lt;------------|\ new_ack\:0\ --\ decline\ the\ request\ (disconnected\!)\n\ </pre>\n\n\ 5.\ Quitting\ a\ game\n\ <pre>\n\ \ Client\ \ \ \ \ \ \ \ Server\n\ \ \ \ |------------&gt;|\ join\:\ --\ request\ to\ join\n\ \ \ \ |&lt;------------|\ join_ack\:1,9,0,0,2,1,...\ --\ accept\ the\ request\n\ \ \ \ ...\n\ \ \ \ |------------&gt;|\ quit\:\ --\ quit\ the\ game\ (disconnected\!)\n\ </pre>\n\ \n\ <p>\n\ To\ receive\ messages\ from\ the\ peer,\ register\ a\ {@link\ MessageListener}\n\ and\ then\ call\ the\ {@link\ \#receiveMessagesAsync()}\ method\ as\ shown\ below.\n\ This\ method\ creates\ a\ new\ thread\ to\ receive\ messages\ asynchronously.\n\ </p>\n\ \n\ <pre>\n\ \ Socket\ socket\ \=\ ...;\n\ \ NetworkAdapter\ network\ \=\ new\ NetworkAdapter(socket);\n\ \ network.setMessageListener(new\ NetworkAdapter.MessageListener()\ {\n\ \ \ \ \ \ public\ void\ messageReceived(NetworkAdapter.MessageType\ type,\ int\ x,\ int\ y,\ int\ z,\ int[]\ others)\ {\n\ \ \ \ \ \ \ \ switch\ (type)\ {\n\ \ \ \ \ \ \ \ \ \ case\ JOIN\:\ ...\ \n\ \ \ \ \ \ \ \ \ \ case\ JOIN_ACK\:\ ...\ //\ x\ (response),\ y\ (size),\ others\ (board)\n\ \ \ \ \ \ \ \ \ \ case\ NEW\:\ ...\ \ \ \ \ \ //\ x\ (size),\ others\ (board)\n\ \ \ \ \ \ \ \ \ \ case\ NEW_ACK\:\ ...\ \ //\ x\ (response)\n\ \ \ \ \ \ \ \ \ \ case\ FILL\:\ ...\ \ \ \ \ //\ x\ (x),\ y\ (y),\ z\ (number)\n\ \ \ \ \ \ \ \ \ \ case\ FILL_ACK\:\ ...\ //\ x\ (x),\ y\ (y),\ z\ (number)\n\ \ \ \ \ \ \ \ \ \ case\ QUIT\:\ ...\n\ \ \ \ \ \ \ \ \ \ ...\n\ \ \ \ \ \ \ \ }\n\ \ \ \ \ \ }\n\ \ \ \ });\n\n\ \ //\ receive\ messages\ asynchronously\n\ \ network.receiveMessagesAsync();\n\ </pre>\n\n\ <p>\n\ To\ send\ messages\ to\ the\ peer,\ call\ the\ <code>writeXXX</code>\ methods.\ \n\ These\ methods\ run\ asynchronously,\ and\ messages\ are\ sent\n\ in\ the\ order\ they\ are\ received\ by\ the\ <code>writeXXX</code>\ methods.\n\ </p>\n\ \n\ <pre>\n\ \ network.writeJoin();\n\ \ network.writeFill(1,2,3);\n\ \ ...\n\ \ network.close();\n\ </pre>\n\n\ @author\ cheon\n\ @see\ MessageType\n\ @see\ MessageListener\n
comment1.params=socket
comment1.target=NetworkAdapter(java.net.Socket)
comment1.text=\ \n\ Create\ a\ new\ network\ adapter\ to\ read\ messages\ from\ and\ to\ write\n\ messages\ to\ the\ given\ socket.\n\ \n\ @param\ socket\ Socket\ to\ read\ and\ write\ messages.\n
comment10.params=msg
comment10.target=java.lang.String\ msgBody(java.lang.String)
comment10.text=Parse\ and\ return\ the\ body\ of\ the\ given\ message.
comment11.params=msgBody
comment11.target=void\ parseJoinMessage(java.lang.String)
comment12.params=msgBody
comment12.target=void\ parseJoinAckMessage(java.lang.String)
comment12.text=Parse\ and\ notify\ the\ given\ play_ack\ message\ body.
comment13.params=msgBody
comment13.target=void\ parseNewAckMessage(java.lang.String)
comment13.text=Parse\ and\ notify\ the\ given\ new_ack\ message\ body.
comment14.params=msgBody
comment14.target=void\ parseNewMessage(java.lang.String)
comment14.text=Parse\ and\ notify\ the\ given\ play_ack\ message\ body.
comment15.params=txt
comment15.target=int\ parseInt(java.lang.String)
comment15.text=\ \n\ Parse\ the\ given\ string\ as\ an\ int;\ return\ -1\ if\ the\ input\n\ is\ not\ well-formed.\ \n
comment16.params=type\ msgBody
comment16.target=void\ parseFillMessage(NetworkAdapter.MessageType,\ java.lang.String)
comment16.text=Parse\ and\ notify\ the\ given\ move\ or\ move_ack\ message.
comment17.params=type\ msgBody
comment17.target=void\ parseSimpleMessage(NetworkAdapter.MessageType,\ java.lang.String)
comment18.params=msg
comment18.target=void\ writeMsg(java.lang.String)
comment18.text=Write\ the\ given\ message\ asynchronously.
comment19.params=
comment19.target=void\ writeJoin()
comment19.text=\n\ Write\ a\ join\ message\ asynchronously.\n\n\ @see\ \#writeJoinAck()\n\ @see\ \#writeJoinAck(int,\ int...)\n
comment2.params=socket\ logger
comment2.target=NetworkAdapter(java.net.Socket,\ java.io.PrintStream)
comment2.text=\ \n\ Create\ a\ new\ network\ adapter.\ Messages\ are\ to\ be\ read\ from\ and\ \n\ written\ to\ the\ given\ socket.\ All\ incoming\ and\ outgoing\ \n\ messages\ will\ be\ logged\ on\ the\ given\ logger.\n\ \n\ @param\ socket\ Socket\ to\ read\ and\ write\ messages.\n\ @param\ logger\ Log\ all\ incoming\ and\ outgoing\ messages.\n
comment20.params=name
comment20.target=void\ writeName(java.lang.String)
comment21.params=
comment21.target=void\ writeJoinAck()
comment21.text=\n\ Write\ a\ "declined"\ join_ack\ message\ asynchronously.\n\n\ @see\ \#writeJoin()\n
comment22.params=size\ squares
comment22.target=void\ writeJoinAck(int,\ int[])
comment22.text=\n\ Write\ an\ "accepted"\ join_ack\ message\ asynchronously.\ \n\ \n\ @param\ size\ Size\ of\ the\ board\n\ @param\ squares\ Non-empty\ squares\ of\ the\ board.\ Each\ square\ is\ represented\n\ \ \ as\ a\ tuple\ of\ (x,\ y,\ v,\ f),\ where\ x\ and\ y\ are\ 0-based\ column/row\ indexes,\n\ \ \ v\ is\ a\ non-zero\ number,\ and\ f\ is\ a\ flag\ indicating\ whether\ the\ number\n\ \ \ is\ given\ (1)\ or\ entered\ by\ the\ user\ (0).\n\n\ @see\ \#writeJoin()\n
comment23.params=size\ squares
comment23.target=void\ writeNew(int,\ int[])
comment23.text=\n\ Write\ a\ new\ game\ message\ asynchronously.\n\ \n\ @param\ size\ Size\ of\ the\ board\n\ @param\ squares\ Non-empty\ squares\ of\ the\ board.\ Each\ square\ is\ represented\n\ \ \ as\ a\ tuple\ of\ (x,\ y,\ v,\ f),\ where\ x\ and\ y\ are\ 0-based\ column/row\ indexes,\n\ \ \ v\ is\ a\ non-zero\ number,\ and\ f\ is\ a\ flag\ indicating\ whether\ the\ number\n\ \ \ is\ given\ (1)\ or\ entered\ by\ the\ user\ (0).\n\n\ @see\ \#writeNewAck(boolean)\n
comment24.params=response
comment24.target=void\ writeNewAck(boolean)
comment24.text=\n\ \ Write\ a\ new_ack\ message\ asynchronously.\n\ \ \n\ \ @param\ response\ True\ for\ accepted;\ false\ for\ declined.\n\ \ \n\ \ @see\ \#writeNew(int,\ int...)\n
comment25.params=flag
comment25.target=int\ toInt(boolean)
comment25.text=Convert\ the\ given\ boolean\ flag\ to\ an\ int.
comment26.params=x\ y\ number
comment26.target=void\ writeFill(int,\ int,\ int)
comment26.text=\n\ Write\ a\ fill\ message\ asynchronously.\ \n\ \n\ @param\ x\ 0-based\ column\ index\ of\ the\ square\n\ @param\ y\ 0-based\ row\ index\ of\ the\ square\n\ @param\ number\ Filled-in\ number\n\n\ @see\ \#writeFillAck(int,\ int,\ int)\n
comment27.params=x\ y\ number
comment27.target=void\ writeFillAck(int,\ int,\ int)
comment27.text=\n\ Write\ a\ fill_ack\ message\ asynchronously.\n\n\ @param\ x\ 0-based\ column\ index\ of\ the\ square\n\ @param\ y\ 0-based\ row\ index\ of\ the\ square\n\ @param\ number\ Filled-in\ number\n\ \n\ @see\ \#writeFill(int,\ int,\ int)\n
comment28.params=
comment28.target=void\ writeQuit()
comment28.text=Write\ a\ quit\ (gg)\ message\ (to\ quit\ the\ game)\ asynchronously.
comment29.params=msg
comment29.target=void\ writeMessage(java.lang.String)
comment3.params=
comment3.target=java.net.Socket\ socket()
comment3.text=\ Return\ the\ associated\ socket.\n\ @return\ Socket\ associated\ with\ this\ adapter.\n
comment30.params=color
comment30.target=void\ writeColor(java.lang.String)
comment31.params=type
comment31.target=void\ notifyMessage(NetworkAdapter.MessageType)
comment31.text=Notify\ the\ listener\ the\ receipt\ of\ the\ given\ message\ type.
comment32.params=type\ x
comment32.target=void\ notifyMessage(NetworkAdapter.MessageType,\ int)
comment32.text=Notify\ the\ listener\ the\ receipt\ of\ the\ given\ message\ type.
comment33.params=type\ x\ others
comment33.target=void\ notifyMessage(NetworkAdapter.MessageType,\ int,\ int[])
comment33.text=Notify\ the\ listener\ the\ receipt\ of\ the\ given\ message\ type.
comment34.params=type\ x\ y\ v
comment34.target=void\ notifyMessage(NetworkAdapter.MessageType,\ int,\ int,\ int)
comment34.text=Notify\ the\ listener\ the\ receipt\ of\ the\ given\ message.
comment35.params=type\ x\ y\ others
comment35.target=void\ notifyMessage(NetworkAdapter.MessageType,\ int,\ int,\ int[])
comment35.text=Notify\ the\ listener\ the\ receipt\ of\ the\ given\ message\ type.
comment36.params=type\ msg
comment36.target=void\ notifyMessage(NetworkAdapter.MessageType,\ java.lang.String)
comment4.params=
comment4.target=void\ close()
comment4.text=\ Close\ the\ IO\ streams\ of\ this\ adapter.\ Note\ that\ the\ socket\n\ to\ which\ the\ streams\ are\ attached\ is\ not\ closed\ by\nthis\ method.
comment5.params=listener
comment5.target=void\ setMessageListener(NetworkAdapter.MessageListener)
comment5.text=\n\ Register\ the\ given\ messageListener\ to\ be\ notified\ when\ a\ message\n\ is\ received.\n\ \n\ @param\ listener\ To\ be\ notified\ when\ a\ message\ is\ received.\n\n\ @see\ MessageListener\n\ @see\ \#receiveMessages()\n\ @see\ \#receiveMessagesAsync()\n
comment6.params=
comment6.target=void\ receiveMessages()
comment6.text=\n\ Start\ accepting\ messages\ from\ this\ network\ adapter\ and\n\ notifying\ them\ to\ the\ registered\ listener.\ This\ method\ blocks\n\ the\ caller.\ To\ receive\ messages\ synchronously,\ use\ the\n\ {@link\ \#receiveMessagesAsync()}\ method\ that\ creates\ a\ new\n\ background\ thread.\n\n\ @see\ \#setMessageListener(MessageListener)\n\ @see\ \#receiveMessagesAsync()\n
comment7.params=
comment7.target=void\ receiveMessagesAsync()
comment7.text=\n\ Start\ accepting\ messages\ asynchronously\ from\ this\ network\n\ adapter\ and\ notifying\ them\ to\ the\ registered\ listener.\n\ This\ method\ doesn't\ block\ the\ caller.\ Instead,\ a\ new\n\ background\ thread\ is\ created\ to\ read\ incoming\ messages.\n\ To\ receive\ messages\ synchronously,\ use\ the\n\ {@link\ \#receiveMessages()}\ method.\n\n\ @see\ \#setMessageListener(MessageListener)\n\ @see\ \#receiveMessages()\n
comment8.params=
comment8.target=void\ run()
comment9.params=msg
comment9.target=void\ parseMessage(java.lang.String)
comment9.text=Parse\ the\ given\ message\ and\ notify\ to\ the\ registered\ listener.
numComments=37
