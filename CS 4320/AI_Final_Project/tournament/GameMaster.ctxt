#BlueJ class context
comment0.target=GameMaster
comment0.text=\n\ Normal\ Form\ Round-Robin\ Tournament\ Simulator\ (NFRRTS\ for\ short,\ we'll\ keep\ working\ on\ the\ name)\n\ \n\ @author\ Marcus\ Gutierrez\ and\ Oscar\ Veliz\n\ @version\ 2019.04.15\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ Runs\ the\ tournament.\ Add\ your\ agent(s)\ to\ the\ list.\n\ @param\ args\ not\ using\ any\ command\ line\ arguments\n
comment10.params=matrix\ players
comment10.target=void\ printMatrix(double[][],\ java.util.ArrayList)
comment10.text=\n\ Want\ to\ visualize\ the\ results\ of\ a\ tournament?\ Call\ this\ function.\n\ @param\ matrix\ Payoff\ Matrix\n\ @param\ players\ List\ of\ Players\n
comment11.params=matrix
comment11.target=double[]\ calculateAverageExpectedPayoffs(double[][])
comment11.text=\n\ Calculate\ average\ expected\ payoffs\ for\ each\ player\n\ @param\ matrix\ the\ tournament\ payoff\ matrix\n\ @return\ average\ expected\ payoffs\n
comment12.params=matrix
comment12.target=double[]\ calculateRegrets(double[][])
comment12.text=\n\ Calculates\ the\ regrets\ for\ every\ agent\ and\ stores\ them\ in\ the\ array.\n\ @param\ matrix\ the\ tournament\ payoffs\n\ @return\ array\ of\ regrets\ in\ the\ tournament\n
comment13.params=matrix
comment13.target=double[]\ calculateReversePayoffs(double[][])
comment13.text=\n\ Calculates\ the\ average\ payoffs\ scored\ against\ each\ agent\ (the\ reverse\ payoff)\n\ @param\ matrix\ array\ of\ tournament\ payoffs\n\ @return\ the\ reverse\ of\ how\ the\ players\ did\n
comment14.params=matrix
comment14.target=double[]\ calculateStabilities(double[][])
comment14.text=\n\ Calculates\ the\ stabilities\ for\ every\ agents\ and\ stores\ them\ in\ the\ array.\n\ (Taken\ from\ \ GameUtils\ class\ in\ ega.games\ package.)\n\ @param\ matrix\ the\ payoffs\ in\ the\ tournament\n\ @return\ stability\ value\ (how\ likely\ to\ switch\ strategies)\n
comment15.params=a
comment15.target=double\ maximum(double[])
comment15.text=\n\ Returns\ the\ maximum\ number\ in\ the\ given\ array\ of\ doubles.\n\ \n\ @param\ a\ the\ array\ of\ doubles.\n\ @return\ the\ maximum\ number\ in\ the\ array.\n
comment16.params=text\ players\ array
comment16.target=void\ playerArrayPrinter(java.lang.String,\ java.util.ArrayList,\ double[])
comment16.text=\n\ Player\ Array\ printer\n\ @param\ text\ general\ text\ usually\ a\ heading\n\ @param\ players\ the\ list\ of\ players\n\ @param\ array\ the\ values\ to\ be\ printed\n
comment2.params=p1\ p2\ game
comment2.target=double[]\ repeater(Player,\ Player,\ games.MatrixGame)
comment2.text=\n\ Execute\ two\ agents,\ add\ to\ their\ history,\ return\ the\ payoffs\n\ @param\ p1\ player\ 1\n\ @param\ p2\ player\ 2\n\ @param\ game\ the\ game\ they're\ playing\ (don't\ need\ to\ copy)\n\ @return\ the\ expected\ payoffs\n
comment3.params=pDriver
comment3.target=void\ tryPlayer(PlayerDriver)
comment3.text=\n\ Tries\ to\ execute\ a\ Player\ class'\ method\ by\ using\ threads\ for\ protection\ in\ case\n\ the\ Player\ subclasses\ crash\ or\ time\ out.\n\ \n\ @param\ pDriver\ The\ thread\ that\ will\ execute\ the\ player\n
comment4.params=p
comment4.target=void\ computeStrategies(java.util.ArrayList)
comment4.text=\n\ Figures\ out\ every\ agent\ strategy\ for\ every\ game\ for\ all\ players\ within\ a\ game\n\ @param\ p\ The\ agents\ being\ run\ in\ the\ tournament\n
comment5.params=
comment5.target=void\ readGames()
comment5.text=\n\ Reads\ all\ the\ games\ used\ in\ the\ tournament\n\ ***DEPRICATED***\n
comment6.params=p1\ p2\ gameNumber
comment6.target=double[]\ match(Player,\ Player,\ int)
comment6.text=\n\ A\ single\ individual\ match\ between\ to\ players,\ the\ first\ player\ is\ row\ the\ second\ is\ column\n\ \n\ If\ a\ strategy\ for\ a\ player\ is\ INVALID\ it\ will\ assign\ a\ payoff\ of\ -1337\ to\ that\ player\n\ @param\ p1\ row\ player\n\ @param\ p2\ column\ player\n\ @param\ gameNumber\ game\n\ @return\ the\ payoffs\ of\ the\ match\n
comment7.params=p1\ p2\ gameNumber\ game
comment7.target=double[]\ match(Player,\ Player,\ int,\ games.MatrixGame)
comment7.text=\n\ A\ single\ individual\ match\ between\ to\ players,\ the\ first\ player\ is\ row\ the\ second\ is\ column\n\ \n\ If\ a\ strategy\ for\ a\ player\ is\ invalid\ it\ will\ assign\ a\ payoff\ of\ -1337\ to\ that\ player\n\ @param\ p1\ row\ player\n\ @param\ p2\ column\ player\n\ @param\ gameNumber\ game\n\ @param\ game\ game\ if\ different\ from\ global\n\ @return\ the\ payoffs\ of\ the\ match\n
comment8.params=s1\ s2\ mg
comment8.target=double[]\ match(games.MixedStrategy,\ games.MixedStrategy,\ games.MatrixGame)
comment8.text=\n\ Run\ match\ using\ strategies\ instead\ of\ players\n\ @param\ s1\ player\ 1\ strategy\n\ @param\ s2\ player\ 2\ strategy\n\ @param\ mg\ game\ to\ play\n\ @return\ expected\ payoffs\n
comment9.params=matrix\ payoffs\ p1\ p2\ wins
comment9.target=void\ updateResults(double[][],\ double[],\ int,\ int,\ double[])
comment9.text=\n\ Computes\ and\ stores\ the\ results\ of\ a\ match\ given\ the\ expected\ payoffs\n\ @param\ matrix\ Payoff\ Matrix\n\ @param\ payoffs\ results\ of\ a\ match\n\ @param\ p1\ Player\ 1\n\ @param\ p2\ Player\ 2\n\ @param\ wins\ data\ structure\ that\ stores\ wins\n
numComments=17
