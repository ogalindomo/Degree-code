#BlueJ class context
comment0.target=GameObserver
comment0.text=\n\ Abstract\ class\ for\ observing\ a\ game\ matrix.\n
comment1.params=
comment1.target=GameObserver()
comment1.text=\n\ Blank\ constructor\n
comment10.params=
comment10.target=int\ numObsLeft()
comment10.text=\n\ Returns\ the\ number\ of\ samples\ left\ before\ the\ bound\n\ @return\ the\ number\ of\ samples\ left\n
comment11.params=
comment11.target=int\ getBound()
comment11.text=\n\ Returns\ the\ bound\ on\ observations\n\ @return\ the\ bound\n
comment12.params=maxObservations
comment12.target=void\ setBound(int)
comment12.text=\n\ Sets\ a\ bound\ on\ the\ maximum\ observations\n\ @param\ maxObservations\ the\ bound\n
comment13.params=densityBound
comment13.target=void\ setDensityBound(double)
comment13.text=\n\ Sets\ a\ bound\ based\ on\ a\ particular\ density\ of\ samples\n\ @param\ densityBound\ the\ bound\n
comment14.params=
comment14.target=double\ getDensityBound()
comment14.text=\n\ Returns\ the\ density\ bound\n\ @return\ the\ bound\n
comment15.params=deterministic
comment15.target=void\ setDeterministic(boolean)
comment15.text=\n\ Set\ the\ observer\ to\ operate\ in\ deterministic\ mode\n\ In\ this\ case,\ repeated\ queries\ for\ the\ same\ outcome\ are\ not\ counted\ as\n\ additional\ observations.\n\ @param\ deterministic\ true\ if\ deterministic\n
comment16.params=
comment16.target=boolean\ getDeterministic()
comment16.text=\n\ Returns\ whether\ or\ not\ the\ observations\ are\ deterministic\n\ @return\ if\ deterministic\n
comment17.params=
comment17.target=int\ getNumPlayers()
comment17.text=\n\ Returns\ the\ number\ of\ players\ in\ this\ game\n\ @return\ the\ number\ of\ players\n\ \n
comment18.params=player
comment18.target=int\ getNumActions(int)
comment18.text=\n\ Returns\ the\ number\ of\ actions\ of\ the\ given\ player\n\ or\ a\ vector\ of\ Integers\ with\ the\ numbers\ of\ actions.\n\n\ @param\ player\ the\ index\ of\ the\ player\ whose\ actions\ should\ be\ returned\n\ @return\ the\ number\ of\ actions\n
comment19.params=
comment19.target=int[]\ getNumActions()
comment19.text=\n\ Returns\ an\ array\ containing\ the\ number\ of\ actions\ that\ each\n\ player\ has.\n\ @return\ the\ number\ of\ actions\ for\ each\ player\n
comment2.params=deterministic
comment2.target=GameObserver(boolean)
comment2.text=\n\ constructor\ given\ if\ deterministic\n\ @param\ deterministic\ true\ when\ deterministic\ false\ otherwise\n
comment20.params=
comment20.target=int\ getNumProfiles()
comment20.text=\n\ Returns\ the\ number\ of\ profiles\ in\ the\ underlying\ game\n\ @return\ the\ number\ of\ profiles\n
comment21.params=outcome
comment21.target=double[]\ getSample(int[])
comment21.text=\n\ Returns\ a\ sample\ of\ the\ payoffs\ for\ a\ particular\ outcome,\n\ recording\ the\ access.\ (in\ the\ deterministic\ case,\ max\ count\ is\ 1)\n\ <p>\n\ If\ the\ bound\ on\ the\ number\ of\ samples\ has\ been\ reached,\ return\ null\n\ </p>\n\ @param\ outcome\ the\ outcome\ you\ want\ to\ sample\ payoffs\ of\n\ @return\ the\ sample\n
comment22.params=
comment22.target=int\ getNumObs()
comment22.text=\n\ Returns\ the\ total\ number\ of\ observations\n\ @return\ the\ number\ of\ observations\n
comment23.params=
comment23.target=double\ getObservationDensity()
comment23.text=\n\ Returns\ the\ sample\ density\ (total\ samples\ /\ num\ profiles)\n\ @return\ the\ density\n
comment24.params=
comment24.target=double\ getFractionProfilesObserved()
comment24.text=\n\ Returns\ the\ fraction\ of\ profiles\ that\ have\ at\ least\ 1\ sample\n\ @return\ the\ fraction\n
comment25.params=
comment25.target=java.lang.String\ getDescription()
comment25.text=\n\ Returns\ a\ description\ of\ the\ observation\ method\n\ @return\ the\ description\n
comment26.params=outcome
comment26.target=double[]\ samplePayoffs(int[])
comment26.text=\n\ Returns\ payoffs\ for\ all\ players\n\n\ @param\ outcome\ the\ action\ choices\ for\ all\ players\n\ @return\ the\ payoffs\n
comment3.params=g
comment3.target=GameObserver(Game)
comment3.text=\n\ constructor\ given\ gmea\n\ @param\ g\ game\ to\ observe\n
comment4.params=g\ deterministic
comment4.target=GameObserver(Game,\ boolean)
comment4.text=\n\ constructor\ given\ gmea\n\ @param\ g\ game\ to\ observe\n\ @param\ deterministic\ true\ when\ deterministic\n
comment5.params=g
comment5.target=void\ setGame(Game)
comment5.text=\n\ Set\ the\ game\ to\ observe\n\ @param\ g\ the\ game\n
comment6.params=
comment6.target=void\ reset()
comment6.text=\n\ Reset\ all\ of\ the\ observation\ count\ information\n
comment7.params=
comment7.target=void\ initObsCounts()
comment7.text=\n\ Initialize\ all\ observation\ counts\ to\ 0\n
comment8.params=
comment8.target=double\ getDefaultPayoff()
comment8.text=\n\ get\ the\ default\ payoff\n\ @return\ the\ default\ payoff\n
comment9.params=defaultPayoff
comment9.target=void\ setDefaultPayoff(double)
comment9.text=\n\ get\ the\ default\ payoff\n\ @param\ defaultPayoff\ the\ default\ payoff\n
numComments=27
