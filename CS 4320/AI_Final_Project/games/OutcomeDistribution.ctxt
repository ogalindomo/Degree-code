#BlueJ class context
comment0.target=OutcomeDistribution
comment0.text=\n\ Represents\ a\ distribution\ over\ outcomes\ in\ a\ game\n
comment1.params=original
comment1.target=OutcomeDistribution(OutcomeDistribution)
comment1.text=\n\ copy\ constructor\n\ @param\ original\ what\ to\ be\ copied\n
comment10.params=
comment10.target=void\ setCentroid()
comment10.text=\n\ Sets\ this\ distribution\ to\ represent\ the\ centroid\n
comment11.params=
comment11.target=void\ setRandomPureProfile()
comment11.text=\n\ set\ a\ single\ profile\ chosen\ at\ uniform\ random\ as\ the\ predictions\n
comment12.params=value
comment12.target=void\ setAll(double)
comment12.text=\n\ Sets\ all\ probabilities\ to\ the\ given\ value\n\n\ @param\ value\ value\ to\ set\ each\ probability\ to\n
comment13.params=strategies
comment13.target=void\ setMixedStrategies(java.util.List)
comment13.text=\n\ Sets\ the\ distribution\ based\ on\ the\ given\ mixed\ strategies\n\ @param\ strategies\ the\ list\ of\ mixed\ strategies\n
comment14.params=outcome
comment14.target=void\ setPureOutcome(int[])
comment14.text=\n\ Legacy\n\ @param\ outcome\ the\ outcome\ to\ set\n
comment15.params=
comment15.target=void\ normalize()
comment15.text=\n\ normalize\ this\ distribution\ so\ that\ it\ sums\ to\ 1\n\ If\ the\ sum\ of\ current\ values\ is\ 0,\ set\ the\ values\ to\ the\ centroid\n
comment16.params=outcome\ value
comment16.target=void\ setProb(int[],\ double)
comment16.text=\n\ Initialize\ the\ probability\ of\ an\ outcome\n\ @param\ outcome\ to\ be\ set\n\ @param\ value\ to\ be\ set\n
comment17.params=outcome
comment17.target=double\ getProb(int[])
comment17.text=\n\ get\ the\ probability\ of\ an\ outcome\n\ @param\ outcome\ the\ outcome\n\ @return\ the\ probability\n
comment18.params=
comment18.target=boolean\ isValid()
comment18.text=\n\ Check\ whether\ this\ is\ a\ valid\ probability\ distribution\ (sums\ to\ 1)\n\ Uses\ a\ tolerance\ of\ 0.01,\ so\ anything\ between\ 0.99\ and\ 1.01\ is\ valid\n\ @return\ true\ if\ distribution\ sums\ to\ 1,\ false\ otherwise\n
comment19.params=
comment19.target=double\ computeSum()
comment19.text=\n\ compute\ the\ sum\ of\ the\ values\ for\ all\ profiles\n\ @return\ the\ sum\n
comment2.params=nActions
comment2.target=OutcomeDistribution(int[])
comment2.text=\n\ Create\ a\ new\ distribution\ object\n\ Initialized\ by\ default\ to\ the\ centroid\ (equal\ probabilities\ for\ all\ outcomes)\n\ @param\ nActions\ the\ number\ of\ actions\n
comment20.params=
comment20.target=double\ computeEntropy()
comment20.text=\n\ returns\ the\ information\ entropy\ of\ this\ distribution\n\ @return\ entropy\n
comment21.params=delta
comment21.target=void\ mixWithUniform(double)
comment21.text=\n\ computes\ a\ mixture\ of\ this\ distribution\ with\ the\ uniform\ distribution\n\ with\ probability\ delta,\ the\ distribution\ of\ play\ is\ uniform\n\ with\ probability\ 1-delta,\ the\ distribution\ of\ play\ is\ the\ current\ distribution\n\ @param\ delta\ see\ above\ description\n
comment22.params=
comment22.target=int[]\ sampleDistribution()
comment22.text=\n\ select\ a\ random\ profile\ according\ to\ this\ outcome\ distribution\n\ @return\ random\ profile\n
comment23.params=
comment23.target=java.lang.String\ toString()
comment23.text=\n\ returns\ a\ string\ distribution\ of\ the\ distribution\n\ @return\ standard\ toString()\n
comment3.params=nActions\ initialValue
comment3.target=OutcomeDistribution(int[],\ double)
comment3.text=\n\ Create\ a\ new\ distribution\ object\n\ Initial\ all\ probabilities\ to\ the\ given\ value\n\ @param\ nActions\ the\ number\ of\ actions\n\ @param\ initialValue\ what\ to\ initialize\ them\ to\n
comment4.params=strategies
comment4.target=OutcomeDistribution(java.util.List)
comment4.text=\n\ Create\ a\ new\ distribution\ object\ based\ on\ the\ joint\ mixed\ strategies\ given\n\ @param\ strategies\ a\ list\ of\ mixed\ strategies\n
comment5.params=
comment5.target=OutcomeIterator\ iterator()
comment5.text=\n\ gets\ an\ iterator\ for\ this\ distribution\n\ @return\ the\ outcome\ iterater\n
comment6.params=restrictedPlayers
comment6.target=OutcomeDistribution\ getConditionalDistribution(java.util.List)
comment6.text=\n\ Returns\ the\ conditional\ distribution\ for\ the\ given\ restriction\ set\n\ @param\ restrictedPlayers\ avoid\ these\ players\n\ @return\ the\ conditional\ distribrution\n
comment7.params=
comment7.target=int[]\ getNumActions()
comment7.text=\n\ get\ the\ number\ of\ actions\n\ @return\ the\ number\ of\ action\n
comment8.params=
comment8.target=int\ getNumPlayers()
comment8.text=\n\ get\ the\ number\ of\ players\n\ @return\ the\ number\ of\ players\n
comment9.params=player
comment9.target=double[]\ getMarginalDistribution(int)
comment9.text=\n\ Compute\ \ the\ marginal\ distribution\ for\ a\ given\ player's\ actions\n\n\ @param\ player\ player\n\ @return\ marginal\ distribution\n
numComments=24
